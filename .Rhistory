library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
data("mtcars")
cars <- mtcars
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
head(cars)
+ }
myPlot <- function(s) {
+     plot(cars$mpg - mean(cars$mpg), cars$wt - mean(cars$wt))
+     abline(0, s)
+ }
myPlot <- function(s) {
+     plot(cars$mpg - mean(cars$mpg), cars$wt - mean(cars$wt))
+     abline(0, s)
+ }
myPlot <- function(s) {
plot(cars$mpg - mean(cars$mpg), cars$wt - mean(cars$wt))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("shiny")
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shiny::runApp('C:/Users/Anton/Desktop/Analytics/Data Science Course/Course 9/PAapp')
setwd("C:/Users/Anton/Desktop/Analytics/Data Science Course/Course 9/PAapp")
shiny::runApp()
VIPdata <- as.data.frame(getSymbols("GS", src = "yahoo",
from = "2012-01-01",
to = as.character(Sys.Date()),
auto.assign = FALSE))
mVIP <- to.monthly(VIPdata)
VIPcl <- Cl(mVIP)
ts1 <- ts(VIPcl, frequency = 12)
ts1Train <- window(ts1, start = 1, end = 4)
ts1Test <- window(ts1, start = 4, end = 4.66)
ets1 <- ets(ts1Train, model="MMM")
fcast <- forecast(ets1)
plot(fcast, main = "PLot")
lines(ts1Test, col="red")
ts1
ts1Train
ts1Test
ts1Train <- window(ts1, start = 1, end = 4-0.01)
ts1Test <- window(ts1, start = 4, end = 4.66)
ts1Train
ets1 <- ets(ts1Train, model="MMM")
fcast <- forecast(ets1, h=8)
plot(fcast, main = "PLot")
lines(ts1Test, col="red")
summary(fcast)
str(fcast)
fcast$mean
shiny::runApp()
shiny::runApp()
shiny::runApp()
fcast$lower
fcast$lower[1]
fcast$lower[10]
class(fcast$lower)
shiny::runApp()
fcast$upper
shiny::runApp()
shiny::runApp()
shiny::runApp()
VIPdata <- as.data.frame(getSymbols("GS", src = "yahoo",
from = "2012-01-01",
to = as.character(Sys.Date()),
auto.assign = FALSE))
mVIP <- to.monthly(VIPdata)
VIPcl <- Cl(mVIP)
ts1 <- ts(VIPcl, frequency = 12)
ts1Train <- window(ts1, start = 1, end = 4-0.01)
ts1Test <- window(ts1, start = 4, end = 4.66)
ets1 <- ets(ts1Train, model="MMM")
fcast <- forecast(ets1, h=8, level = 95)
plot(fcast, main = "PLot")
lines(ts1Test, col="red")
errIndex <- fcast$lower > ts1Test || fcast$upper < ts1Test
fcast$lower > ts1Test
fcast$upper < ts1Test
fcast$lower > ts1Test || fcast$upper < ts1Test
fcast$lower > ts1Test | fcast$upper < ts1Test
points(ts1Test[errIndex], col = "green")
errIndex <- fcast$lower > ts1Test | fcast$upper < ts1Test
plot(fcast, main = "PLot")
lines(ts1Test, col="red")
points(ts1Test[errIndex], col = "green")
plot(fcast, main = "PLot")
lines(ts1Test, col="red")
points(ts1Test, col = "green")
plot(fcast, main = "PLot")
lines(ts1Test, col="red")
points(ts1Test[1], col = "green")
plot(fcast, main = "PLot")
lines(ts1Test, col="red")
points(ts1Test, col = errIndex)
cc <- rep("green", 8)
cc
cc[errIndex] <- "red"
errIndex <- fcast$lower > ts1Test | fcast$upper < ts1Test
plot(fcast, main = "PLot")
lines(ts1Test, col="red")
cc <- rep("green", 8)
cc[errIndex] <- "red"
points(ts1Test, col = cc)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
